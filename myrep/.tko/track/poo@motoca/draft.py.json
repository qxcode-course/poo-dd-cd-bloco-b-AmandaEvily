{
    "patches": [
        {
            "label": "2025-10-28_01-44-52",
            "content": "@@ -499,2245 +499,5 @@\n   f%22\n-%7Bself.pessoa%7D%22 if self.pessoa in not None else %22(empty)%22%0A        return f%22power:%7Bself.potencia%7D, time:%7Bself.time%7D, person:(%7Bperson_str%7D)%22%0A%0A    def inserir(self, pessoa: Pessoa) -%3E bool:%0A            if self.pessoa is not None:%0A                print(%22fail: busy motorcycle%22) %0A                return False %0A            self.pessoa = pessoa %0A            return True %0A%0A    def remover(self) -%3E Pessoa %7C None:%0A        if self.pessoa is None:%0A            print(%22fail: empty motorcycle%22)%0A            return None%0A        pessoa = self.pessoa%0A        self.pessoa = None %0A        return pessoa  %0A%0A    def buyTime(self, time: int):%0A        self.time += time%0A%0A    def drive (self, time: int):%0A        if self.time %3C= 0:%0A            print(%22fail: buy time first%22)%0A            return%0A        if self.pessoa is None: %0A            print(%22fail: empty motorcycle%22)%0A            return%0A        if self.pessoa.getAge() %3E 10:%0A            print(%22fail: too old to drive%22)%0A            return%0A%0A        if time %3E self.time:%0A            print(f%22fail: time finished after %7Bself.time%7D minutes%22)%0A            self.time = 0%0A        else: %0A            self.time -= time%0A%0A    def honk(self):%0A        print(%22p%22 + %22e%22 * self.potencia + %22m%22)%0A%0A%0Adef main():%0A    moto = Motoca()%0A    while True: %0A        try: %0A            line = input().strip()%0A        if line == %22%22:%0A            continue%0A%0A        print(f%22$%7Bline%7D%22)%0A        parts = line.split()%0A        cmd = parts%5B0%5D%0A%0A        if cmd == %22end%22:%0A            break %0A%0A        elif cmd == %22show%22:%0A            print(moto)%0A%0A        elif cmd == %22init%22:%0A            pot = int(parts%5B1%5D)%0A            moto = Motoca(pot)%0A%0A        elif cmd == %22enter%22:%0A            nome = parts %5B1%5D%0A            idade = int(parts%5B2%5D)%0A            moto.inserir(Pessoa(nome, idade))%0A%0A        elif cmd == %22leave%22:%0A            pessoa = moto.remover()%0A            if pessoa is not None:%0A                print(pessoa)%0A        %0A        elif cmd == %22buy%22:%0A            tempo = int(parts%5B1%5D)%0A            moto.buyTime(tempo)%0A%0A        elif cmd == %22drive%22:%0A            tempo =  int(parts%5B1%5D)%0A            moto.drive(tempo)%0A%0A        elif cmd == %22honk%22:%0A            moto.honk()%0A%0A        else:%0A            print(%22fail: comando invalido%22)%0A%0A        %0Aif __name__ == %22__main__%22:%0A    main()\n+%22\n",
            "lines": "22"
        },
        {
            "label": "2025-10-28_02-41-07",
            "content": "@@ -510,20 +510,18 @@\n essoa%7D%22 \n-else\n+if\n  self.pe\n",
            "lines": "112"
        },
        {
            "label": "2025-10-28_02-41-54",
            "content": "@@ -510,18 +510,20 @@\n essoa%7D%22 \n-if\n+else\n  self.pe\n",
            "lines": "112"
        },
        {
            "label": "2025-10-28_02-42-33",
            "content": "@@ -1801,51 +1801,8 @@\n p()%0A\n-        except EOFError:%0A            break%0A\n     \n",
            "lines": "112"
        },
        {
            "label": "2025-10-28_02-43-18",
            "content": "@@ -1,7164 +1,2752 @@\n-import sys%0Afrom typing import Optional%0A%0A# Classe Pessoa%0A# Crie a classe Pessoa com os atributos age e name.%0A# Defina os atributos como privados.%0A# Crie o construtor da classe que recebe name como uma string e age como um n%C3%BAmero.%0A# Crie os m%C3%A9todos getAge() e getName() para retornar a idade e o nome da pessoa, respectivamente.%0A# Crie o m%C3%A9todo toString() para retornar una string no formato %22nome:idade%22.%0Aclass Pessoa:%0A    %22%22%22%0A    Representa um usu%C3%A1rio da motoca, com nome e idade.%0A    %22%22%22%0A    def __init__(self, name: str, age: int):%0A        self.__name: str = name%0A        self.__age: int = age%0A%0A    def getName(self) -%3E str:%0A        %22%22%22Retorna o nome da pessoa.%22%22%22%0A        return self.__name%0A%0A    def getAge(self) -%3E int:%0A        %22%22%22Retorna a idade da pessoa.%22%22%22%0A        return self.__age%0A%0A    def toString(self) -%3E str:%0A        %22%22%22Retorna a representa%C3%A7%C3%A3o em string da pessoa (nome:idade).%22%22%22%0A        return f%22%7Bself.__name%7D:%7Bself.__age%7D%22%0A%0A    def __str__(self) -%3E str:%0A        %22%22%22M%C3%A9todo padr%C3%A3o do Python para convers%C3%A3o em string.%22%22%22%0A        return self.toString()%0A%0A# Classe Motoca%0Aclass Motoca:%0A    %22%22%22%0A    Representa a motoca motorizada do parque.%0A    %22%22%22%0A    %0A    # Crie a classe Motoca com os atributos potencia, time e pessoa.%0A    # Inicialize os atributos no construtor, onde potencia inicia com 1, %0A    # time inicia com 0 e pessoa inicia como nulo (None).%0A    def __init__(self):%0A        self.__potencia: int = 1%0A        self.__time: int = 0%0A        self.__pessoa: Optional%5BPessoa%5D = None # Optional%5BPessoa%5D %C3%A9 o mesmo que Pessoa %7C None%0A%0A    # M%C3%A9todo de utilidade para o comando $init%0A    def init(self, potencia: int):%0A        %22%22%22%0A        Inicializa ou reinicia a motoca com uma nova pot%C3%AAncia.%0A        %22%22%22%0A        self.__potencia = potencia%0A        self.__time = 0%0A        self.__pessoa = None%0A%0A    # Parte 1: Inserir%0A    # Crie o m%C3%A9todo inserir(pessoa: Pessoa): bool que permite inserir uma pessoa na motoca.%0A    # Verifique se h%C3%A1 uma pessoa na motoca. Se houver, imprima %22fail: busy motorcycle%22 e retorne falso.%0A    # Caso contr%C3%A1rio, insira a pessoa na motoca e retorne verdadeiro.%0A    def inserir(self, pessoa: Pessoa) -%3E bool:%0A        %22%22%22%0A        Tenta embarcar uma pessoa na motoca.%0A        %22%22%22%0A        if self.__pessoa is not None:%0A            print(%22fail: busy motorcycle%22)%0A            return False%0A        %0A        self.__pessoa = pessoa%0A        return True%0A%0A    # Parte 2: Remover%0A    # Crie o m%C3%A9todo remover(): Pessoa %7C null que permite remover a pessoa da motoca.%0A    # Verifique se h%C3%A1 uma pessoa na motoca. Se n%C3%A3o houver, imprima %22fail: empty motorcycle%22 e retorne nulo.%0A    # Caso contr%C3%A1rio, remova a pessoa da motoca e retorne a pessoa removida.%0A    def remover(self) -%3E Optional%5BPessoa%5D:%0A        %22%22%22%0A        Tenta desembarcar a pessoa da motoca.%0A        %22%22%22%0A        if self.__pessoa is None:%0A            print(%22fail: empty motorcycle%22)%0A            return None%0A        %0A        pessoa_removida = self.__pessoa%0A        self.__pessoa = None%0A        return pessoa_removida%0A%0A    # Parte 3: Comprar Tempo%0A    # Crie o m%C3%A9todo buyTime(time: number) que permite comprar tempo em minutos.%0A    # Incremente o tempo da motoca com o tempo passado como par%C3%A2metro.%0A    def buyTime(self, time: int):%0A        %22%22%22%0A        Adiciona minutos ao tempo de uso da motoca.%0A        %22%22%22%0A        self.__time += time%0A%0A    # Parte 4: Dirigir%0A    # Crie o m%C3%A9todo drive(time: number) que permite dirigir a motoca por um tempo.%0A    def drive(self, time: int):%0A        %22%22%22%0A        Tenta dirigir a motoca por um determinado n%C3%BAmero de minutos.%0A        %22%22%22%0A        # Verifique se h%C3%A1 tempo dispon%C3%ADvel na motoca.%0A        if self.__time == 0:%0A            print(%22fail: buy time first%22)%0A            return%0A%0A        # Verifique se h%C3%A1 uma pessoa na motoca.%0A        if self.__pessoa is None:%0A            print(%22fail: empty motorcycle%22)%0A            return%0A%0A        # Verifique se a idade da pessoa %C3%A9 maior que 10 anos.%0A        if self.__pessoa.getAge() %3E 10:%0A            print(%22fail: too old to drive%22)%0A            return%0A%0A        # Calcule o novo tempo. Se for menor ou igual a 0...%0A        if time %3E= self.__time:%0A            print(f%22fail: time finished after %7Bself.__time%7D minutes%22)%0A            self.__time = 0%0A        else:%0A            # Atualize o tempo da motoca.%0A            self.__time -= time%0A%0A    # Parte 5: Buzinar%0A    # Crie o m%C3%A9todo honk() que permite buzinar a motoca.%0A    # Construa a string da buzina, onde o n%C3%BAmero de %22e%22 %C3%A9 igual %C3%A0 pot%C3%AAncia.%0A    def honk(self) -%3E str:%0A        %22%22%22%0A        Retorna o som da buzina da motoca.%0A        %22%22%22%0A        return %22P%22 + (%22e%22 * self.__potencia) + %22m%22%0A%0A    # Crie o m%C3%A9todo toString() para mostrar o estado da motoca.%0A    # $show -%3E f%22power:%7Bthis.power%7D, time:%7Bthis.time%7D, person:%7Bthis.person%7D%22%0A    # Ex: power:1, time:0, person:(marcos:4)%0A    # Ex: power:1, time:0, person:(empty)%0A    def toString(self) -%3E str:%0A        %22%22%22%0A        Retorna a representa%C3%A7%C3%A3o em string do estado atual da motoca.%0A        %22%22%22%0A        person_str = %22(empty)%22%0A        if self.__pessoa is not None:%0A            person_str = f%22(%7Bself.__pessoa.toString()%7D)%22%0A            %0A        return f%22power:%7Bself.__potencia%7D, time:%7Bself.__time%7D, person:%7Bperson_str%7D%22%0A%0A    def __str__(self) -%3E str:%0A        %22%22%22M%C3%A9todo padr%C3%A3o do Python para convers%C3%A3o em string.%22%22%22%0A        return self.toString()%0A%0A%0A# Loop principal para processar os comandos%0Adef main():%0A    %22%22%22%0A    Fun%C3%A7%C3%A3o principal que instancia a Motoca e processa os comandos%0A    da entrada padr%C3%A3o (shell).%0A    %22%22%22%0A    moto = Motoca()%0A%0A    while True:%0A        try:%0A            # L%C3%AA a linha de comando%0A            line = input().strip()%0A            if line == %22%22:%0A                continue%0A%0A            # Ecoa o comando lido%0A            print(f%22$%7Bline%7D%22)%0A            %0A            # Divide a linha em palavras (comando e argumentos)%0A            ui = line.split()%0A            cmd = ui%5B0%5D%0A%0A            # Processamento dos comandos%0A            if cmd == 'end':%0A                break%0A            elif cmd == 'init':%0A                # $init %3Cpotencia%3E%0A                moto.init(int(ui%5B1%5D))%0A            elif cmd == 'show':%0A                # $show%0A                print(moto.toString())%0A            elif cmd == 'enter':%0A                # $enter %3Cnome%3E %3Cidade%3E%0A                pessoa = Pessoa(ui%5B1%5D, int(ui%5B2%5D))%0A                moto.inserir(pessoa)%0A            elif cmd == 'leave':%0A                # $leave%0A                pessoa_removida = moto.remover()%0A                if pessoa_removida is not None:%0A                    # Imprime a pessoa que saiu%0A                    print(pessoa_removida.toString())%0A            elif cmd == 'buy':%0A                # $buy %3Ctempo%3E%0A                moto.buyTime(int(ui%5B1%5D))%0A            elif cmd == 'drive':%0A                # $drive %3Ctempo%3E%0A                moto.drive(int(ui%5B1%5D))%0A            elif cmd == 'honk':%0A                # $honk%0A                print(moto.honk())%0A            else:%0A                print(%22fail: unknown command%22)%0A%0A        except EOFError:%0A            # Fim da entrada%0A            break%0A        except Exception as e:%0A            # Captura outros erros (ex: argumentos faltando, convers%C3%A3o de int)%0A            print(f%22fail: %7Be%7D%22, file=sys.stderr)%0A%0A# Ponto de entrada do script\n+class Pessoa:%0A    def __init__(self, name: str, agr: int):%0A        self.__name = name%0A        slef.__age = age %0A    %0A    def getName(self) -%3E str:%0A        return self.__name%0A%0A    def getAge(self) -%3E int:%0A        return self.__age%0A%0A    def __str__(self):%0A        return f%22%7Bself.__name%7D:%7Bself.__age%7D%22%0A%0Aclass Motoca:%0A    def __init__(self, potencia: int = 1):%0A        self.potencia = potencia%0A        self.time = 0%0A        self.pessoa: Pessoa %7C None = None%0A%0A    def __str__(self):%0A        person_str =  f%22%7Bself.pessoa%7D%22 if self.pessoa in not None else %22(empty)%22%0A        return f%22power:%7Bself.potencia%7D, time:%7Bself.time%7D, person:(%7Bperson_str%7D)%22%0A%0A    def inserir(self, pessoa: Pessoa) -%3E bool:%0A            if self.pessoa is not None:%0A                print(%22fail: busy motorcycle%22) %0A                return False %0A            self.pessoa = pessoa %0A            return True %0A%0A    def remover(self) -%3E Pessoa %7C None:%0A        if self.pessoa is None:%0A            print(%22fail: empty motorcycle%22)%0A            return None%0A        pessoa = self.pessoa%0A        self.pessoa = None %0A        return pessoa  %0A%0A    def buyTime(self, time: int):%0A        self.time += time%0A%0A    def drive (self, time: int):%0A        if self.time %3C= 0:%0A            print(%22fail: buy time first%22)%0A            return%0A        if self.pessoa is None: %0A            print(%22fail: empty motorcycle%22)%0A            return%0A        if self.pessoa.getAge() %3E 10:%0A            print(%22fail: too old to drive%22)%0A            return%0A%0A        if time %3E self.time:%0A            print(f%22fail: time finished after %7Bself.time%7D minutes%22)%0A            self.time = 0%0A        else: %0A            self.time -= time%0A%0A    def honk(self):%0A        print(%22p%22 + %22e%22 * self.potencia + %22m%22)%0A%0A%0Adef main():%0A    moto = Motoca()%0A    while True: %0A        try: %0A            line = input().strip()%0A        except EOFError:%0A            break%0A        if line == %22%22:%0A            continue%0A%0A        print(f%22$%7Bline%7D%22)%0A        parts = line.split()%0A        cmd = parts%5B0%5D%0A%0A        if cmd == %22end%22:%0A            break %0A%0A        elif cmd == %22show%22:%0A            print(moto)%0A%0A        elif cmd == %22init%22:%0A            pot = int(parts%5B1%5D)%0A            moto = Motoca(pot)%0A%0A        elif cmd == %22enter%22:%0A            nome = parts %5B1%5D%0A            idade = int(parts%5B2%5D)%0A            moto.inserir(Pessoa(nome, idade))%0A%0A        elif cmd == %22leave%22:%0A            pessoa = moto.remover()%0A            if pessoa is not None:%0A                print(pessoa)%0A        %0A        elif cmd == %22buy%22:%0A            tempo = int(parts%5B1%5D)%0A            moto.buyTime(tempo)%0A%0A        elif cmd == %22drive%22:%0A            tempo =  int(parts%5B1%5D)%0A            moto.drive(tempo)%0A%0A        elif cmd == %22honk%22:%0A            moto.honk()%0A%0A        else:%0A            print(%22fail: comando invalido%22)%0A%0A        \n %0Aif \n",
            "lines": "114"
        },
        {
            "label": "2025-10-28_02-43-49",
            "content": "@@ -1,2752 +1,7164 @@\n-class Pessoa:%0A    def __init__(self, name: str, agr: int):%0A        self.__name = name%0A        slef.__age = age %0A    %0A    def getName(self) -%3E str:%0A        return self.__name%0A%0A    def getAge(self) -%3E int:%0A        return self.__age%0A%0A    def __str__(self):%0A        return f%22%7Bself.__name%7D:%7Bself.__age%7D%22%0A%0Aclass Motoca:%0A    def __init__(self, potencia: int = 1):%0A        self.potencia = potencia%0A        self.time = 0%0A        self.pessoa: Pessoa %7C None = None%0A%0A    def __str__(self):%0A        person_str =  f%22%7Bself.pessoa%7D%22 if self.pessoa in not None else %22(empty)%22%0A        return f%22power:%7Bself.potencia%7D, time:%7Bself.time%7D, person:(%7Bperson_str%7D)%22%0A%0A    def inserir(self, pessoa: Pessoa) -%3E bool:%0A            if self.pessoa is not None:%0A                print(%22fail: busy motorcycle%22) %0A                return False %0A            self.pessoa = pessoa %0A            return True %0A%0A    def remover(self) -%3E Pessoa %7C None:%0A        if self.pessoa is None:%0A            print(%22fail: empty motorcycle%22)%0A            return None%0A        pessoa = self.pessoa%0A        self.pessoa = None %0A        return pessoa  %0A%0A    def buyTime(self, time: int):%0A        self.time += time%0A%0A    def drive (self, time: int):%0A        if self.time %3C= 0:%0A            print(%22fail: buy time first%22)%0A            return%0A        if self.pessoa is None: %0A            print(%22fail: empty motorcycle%22)%0A            return%0A        if self.pessoa.getAge() %3E 10:%0A            print(%22fail: too old to drive%22)%0A            return%0A%0A        if time %3E self.time:%0A            print(f%22fail: time finished after %7Bself.time%7D minutes%22)%0A            self.time = 0%0A        else: %0A            self.time -= time%0A%0A    def honk(self):%0A        print(%22p%22 + %22e%22 * self.potencia + %22m%22)%0A%0A%0Adef main():%0A    moto = Motoca()%0A    while True: %0A        try: %0A            line = input().strip()%0A        except EOFError:%0A            break%0A        if line == %22%22:%0A            continue%0A%0A        print(f%22$%7Bline%7D%22)%0A        parts = line.split()%0A        cmd = parts%5B0%5D%0A%0A        if cmd == %22end%22:%0A            break %0A%0A        elif cmd == %22show%22:%0A            print(moto)%0A%0A        elif cmd == %22init%22:%0A            pot = int(parts%5B1%5D)%0A            moto = Motoca(pot)%0A%0A        elif cmd == %22enter%22:%0A            nome = parts %5B1%5D%0A            idade = int(parts%5B2%5D)%0A            moto.inserir(Pessoa(nome, idade))%0A%0A        elif cmd == %22leave%22:%0A            pessoa = moto.remover()%0A            if pessoa is not None:%0A                print(pessoa)%0A        %0A        elif cmd == %22buy%22:%0A            tempo = int(parts%5B1%5D)%0A            moto.buyTime(tempo)%0A%0A        elif cmd == %22drive%22:%0A            tempo =  int(parts%5B1%5D)%0A            moto.drive(tempo)%0A%0A        elif cmd == %22honk%22:%0A            moto.honk()%0A%0A        else:%0A            print(%22fail: comando invalido%22)%0A%0A        \n+import sys%0Afrom typing import Optional%0A%0A# Classe Pessoa%0A# Crie a classe Pessoa com os atributos age e name.%0A# Defina os atributos como privados.%0A# Crie o construtor da classe que recebe name como uma string e age como um n%C3%BAmero.%0A# Crie os m%C3%A9todos getAge() e getName() para retornar a idade e o nome da pessoa, respectivamente.%0A# Crie o m%C3%A9todo toString() para retornar una string no formato %22nome:idade%22.%0Aclass Pessoa:%0A    %22%22%22%0A    Representa um usu%C3%A1rio da motoca, com nome e idade.%0A    %22%22%22%0A    def __init__(self, name: str, age: int):%0A        self.__name: str = name%0A        self.__age: int = age%0A%0A    def getName(self) -%3E str:%0A        %22%22%22Retorna o nome da pessoa.%22%22%22%0A        return self.__name%0A%0A    def getAge(self) -%3E int:%0A        %22%22%22Retorna a idade da pessoa.%22%22%22%0A        return self.__age%0A%0A    def toString(self) -%3E str:%0A        %22%22%22Retorna a representa%C3%A7%C3%A3o em string da pessoa (nome:idade).%22%22%22%0A        return f%22%7Bself.__name%7D:%7Bself.__age%7D%22%0A%0A    def __str__(self) -%3E str:%0A        %22%22%22M%C3%A9todo padr%C3%A3o do Python para convers%C3%A3o em string.%22%22%22%0A        return self.toString()%0A%0A# Classe Motoca%0Aclass Motoca:%0A    %22%22%22%0A    Representa a motoca motorizada do parque.%0A    %22%22%22%0A    %0A    # Crie a classe Motoca com os atributos potencia, time e pessoa.%0A    # Inicialize os atributos no construtor, onde potencia inicia com 1, %0A    # time inicia com 0 e pessoa inicia como nulo (None).%0A    def __init__(self):%0A        self.__potencia: int = 1%0A        self.__time: int = 0%0A        self.__pessoa: Optional%5BPessoa%5D = None # Optional%5BPessoa%5D %C3%A9 o mesmo que Pessoa %7C None%0A%0A    # M%C3%A9todo de utilidade para o comando $init%0A    def init(self, potencia: int):%0A        %22%22%22%0A        Inicializa ou reinicia a motoca com uma nova pot%C3%AAncia.%0A        %22%22%22%0A        self.__potencia = potencia%0A        self.__time = 0%0A        self.__pessoa = None%0A%0A    # Parte 1: Inserir%0A    # Crie o m%C3%A9todo inserir(pessoa: Pessoa): bool que permite inserir uma pessoa na motoca.%0A    # Verifique se h%C3%A1 uma pessoa na motoca. Se houver, imprima %22fail: busy motorcycle%22 e retorne falso.%0A    # Caso contr%C3%A1rio, insira a pessoa na motoca e retorne verdadeiro.%0A    def inserir(self, pessoa: Pessoa) -%3E bool:%0A        %22%22%22%0A        Tenta embarcar uma pessoa na motoca.%0A        %22%22%22%0A        if self.__pessoa is not None:%0A            print(%22fail: busy motorcycle%22)%0A            return False%0A        %0A        self.__pessoa = pessoa%0A        return True%0A%0A    # Parte 2: Remover%0A    # Crie o m%C3%A9todo remover(): Pessoa %7C null que permite remover a pessoa da motoca.%0A    # Verifique se h%C3%A1 uma pessoa na motoca. Se n%C3%A3o houver, imprima %22fail: empty motorcycle%22 e retorne nulo.%0A    # Caso contr%C3%A1rio, remova a pessoa da motoca e retorne a pessoa removida.%0A    def remover(self) -%3E Optional%5BPessoa%5D:%0A        %22%22%22%0A        Tenta desembarcar a pessoa da motoca.%0A        %22%22%22%0A        if self.__pessoa is None:%0A            print(%22fail: empty motorcycle%22)%0A            return None%0A        %0A        pessoa_removida = self.__pessoa%0A        self.__pessoa = None%0A        return pessoa_removida%0A%0A    # Parte 3: Comprar Tempo%0A    # Crie o m%C3%A9todo buyTime(time: number) que permite comprar tempo em minutos.%0A    # Incremente o tempo da motoca com o tempo passado como par%C3%A2metro.%0A    def buyTime(self, time: int):%0A        %22%22%22%0A        Adiciona minutos ao tempo de uso da motoca.%0A        %22%22%22%0A        self.__time += time%0A%0A    # Parte 4: Dirigir%0A    # Crie o m%C3%A9todo drive(time: number) que permite dirigir a motoca por um tempo.%0A    def drive(self, time: int):%0A        %22%22%22%0A        Tenta dirigir a motoca por um determinado n%C3%BAmero de minutos.%0A        %22%22%22%0A        # Verifique se h%C3%A1 tempo dispon%C3%ADvel na motoca.%0A        if self.__time == 0:%0A            print(%22fail: buy time first%22)%0A            return%0A%0A        # Verifique se h%C3%A1 uma pessoa na motoca.%0A        if self.__pessoa is None:%0A            print(%22fail: empty motorcycle%22)%0A            return%0A%0A        # Verifique se a idade da pessoa %C3%A9 maior que 10 anos.%0A        if self.__pessoa.getAge() %3E 10:%0A            print(%22fail: too old to drive%22)%0A            return%0A%0A        # Calcule o novo tempo. Se for menor ou igual a 0...%0A        if time %3E= self.__time:%0A            print(f%22fail: time finished after %7Bself.__time%7D minutes%22)%0A            self.__time = 0%0A        else:%0A            # Atualize o tempo da motoca.%0A            self.__time -= time%0A%0A    # Parte 5: Buzinar%0A    # Crie o m%C3%A9todo honk() que permite buzinar a motoca.%0A    # Construa a string da buzina, onde o n%C3%BAmero de %22e%22 %C3%A9 igual %C3%A0 pot%C3%AAncia.%0A    def honk(self) -%3E str:%0A        %22%22%22%0A        Retorna o som da buzina da motoca.%0A        %22%22%22%0A        return %22P%22 + (%22e%22 * self.__potencia) + %22m%22%0A%0A    # Crie o m%C3%A9todo toString() para mostrar o estado da motoca.%0A    # $show -%3E f%22power:%7Bthis.power%7D, time:%7Bthis.time%7D, person:%7Bthis.person%7D%22%0A    # Ex: power:1, time:0, person:(marcos:4)%0A    # Ex: power:1, time:0, person:(empty)%0A    def toString(self) -%3E str:%0A        %22%22%22%0A        Retorna a representa%C3%A7%C3%A3o em string do estado atual da motoca.%0A        %22%22%22%0A        person_str = %22(empty)%22%0A        if self.__pessoa is not None:%0A            person_str = f%22(%7Bself.__pessoa.toString()%7D)%22%0A            %0A        return f%22power:%7Bself.__potencia%7D, time:%7Bself.__time%7D, person:%7Bperson_str%7D%22%0A%0A    def __str__(self) -%3E str:%0A        %22%22%22M%C3%A9todo padr%C3%A3o do Python para convers%C3%A3o em string.%22%22%22%0A        return self.toString()%0A%0A%0A# Loop principal para processar os comandos%0Adef main():%0A    %22%22%22%0A    Fun%C3%A7%C3%A3o principal que instancia a Motoca e processa os comandos%0A    da entrada padr%C3%A3o (shell).%0A    %22%22%22%0A    moto = Motoca()%0A%0A    while True:%0A        try:%0A            # L%C3%AA a linha de comando%0A            line = input().strip()%0A            if line == %22%22:%0A                continue%0A%0A            # Ecoa o comando lido%0A            print(f%22$%7Bline%7D%22)%0A            %0A            # Divide a linha em palavras (comando e argumentos)%0A            ui = line.split()%0A            cmd = ui%5B0%5D%0A%0A            # Processamento dos comandos%0A            if cmd == 'end':%0A                break%0A            elif cmd == 'init':%0A                # $init %3Cpotencia%3E%0A                moto.init(int(ui%5B1%5D))%0A            elif cmd == 'show':%0A                # $show%0A                print(moto.toString())%0A            elif cmd == 'enter':%0A                # $enter %3Cnome%3E %3Cidade%3E%0A                pessoa = Pessoa(ui%5B1%5D, int(ui%5B2%5D))%0A                moto.inserir(pessoa)%0A            elif cmd == 'leave':%0A                # $leave%0A                pessoa_removida = moto.remover()%0A                if pessoa_removida is not None:%0A                    # Imprime a pessoa que saiu%0A                    print(pessoa_removida.toString())%0A            elif cmd == 'buy':%0A                # $buy %3Ctempo%3E%0A                moto.buyTime(int(ui%5B1%5D))%0A            elif cmd == 'drive':%0A                # $drive %3Ctempo%3E%0A                moto.drive(int(ui%5B1%5D))%0A            elif cmd == 'honk':%0A                # $honk%0A                print(moto.honk())%0A            else:%0A                print(%22fail: unknown command%22)%0A%0A        except EOFError:%0A            # Fim da entrada%0A            break%0A        except Exception as e:%0A            # Captura outros erros (ex: argumentos faltando, convers%C3%A3o de int)%0A            print(f%22fail: %7Be%7D%22, file=sys.stderr)%0A%0A# Ponto de entrada do script\n %0Aif \n",
            "lines": "216"
        },
        {
            "label": "2025-10-28_02-44-12",
            "content": "@@ -43,17 +43,17 @@\n  str, ag\n-e\n+r\n : int):%0A\n@@ -84,26 +84,26 @@\n me%0A        s\n-e\n l\n+e\n f.__age = ag\n@@ -236,31 +236,22 @@\n def \n-toString(self) -%3E str: \n+__str__(self):\n %0A   \n@@ -297,70 +297,8 @@\n %7D%22%0A%0A\n-    def __str__(self) -%3E str:%0A        return self.toString()%0A%0A\n clas\n@@ -324,24 +324,43 @@\n _init__(self\n+, potencia: int = 1\n ):%0A        s\n@@ -363,26 +363,24 @@\n    self.\n-__\n potencia\n : int = \n@@ -371,25 +371,27 @@\n potencia\n-: int = 1\n+ = potencia\n %0A       \n@@ -400,19 +400,12 @@\n elf.\n-__\n time\n-: int\n  = 0\n@@ -414,26 +414,24 @@\n        self.\n-__\n pessoa: Pess\n@@ -460,122 +460,184 @@\n def \n-init(self, potencia: int):%0A        self.__potencia = potencia%0A        self.__time = 0%0A        self.__pessoa = None\n+__str__(self):%0A        person_str =  f%22%7Bself.pessoa%7D%22 if self.pessoa in not None else %22(empty)%22%0A        return f%22power:%7Bself.potencia%7D, time:%7Bself.time%7D, person:(%7Bperson_str%7D)%22\n %0A%0A  \n@@ -1013,25 +1013,16 @@\n   pessoa\n-_removida\n  = self.\n@@ -1037,26 +1037,24 @@\n        self.\n-__\n pessoa = Non\n@@ -1077,25 +1077,18 @@\n n pessoa\n-_removida\n+  \n %0A%0A    de\n@@ -1124,26 +1124,24 @@\n        self.\n-__\n time += time\n@@ -1191,24 +1191,22 @@\n if self.\n-__\n time \n-=\n+%3C\n = 0:%0A   \n@@ -1271,34 +1271,32 @@\n         if self.\n-__\n pessoa is None: \n@@ -1371,26 +1371,24 @@\n     if self.\n-__\n pessoa.getAg\n@@ -1482,17 +1482,14 @@\n me %3E\n-=\n  self.\n-__\n time\n@@ -1538,26 +1538,24 @@\n after %7Bself.\n-__\n time%7D minute\n@@ -1571,26 +1571,24 @@\n        self.\n-__\n time = 0%0A   \n@@ -1612,26 +1612,24 @@\n        self.\n-__\n time -= time\n@@ -1644,31 +1644,24 @@\n f honk(self)\n- -%3E str\n :%0A        re\n@@ -1662,22 +1662,20 @@\n     \n-return %22P\n+print(%22p\n %22 + \n-(\n %22e%22 \n@@ -1681,26 +1681,24 @@\n  * self.\n-__\n potencia\n ) + %22m%22%0A\n@@ -1693,317 +1693,14 @@\n ncia\n-)\n  + %22m%22\n-%0A%0A    def toString(self) -%3E str:%0A        person_str = %22(empty)%22%0A        if self.__pessoa is not None:%0A            person_str = f%22(%7Bself.__pessoa.toString()%7D)%22%0A        return f%22power:%7Bself.__potencia%7D, time:%7Bself.__time%7D, person:%7Bperson_str%7D%22%0A%0A    def __str__(self) -%3E str:%0A        return self.toString(\n )%0A%0A%0A\n@@ -1797,24 +1797,63 @@\n strip()%0A    \n+    except EOFError:%0A            break%0A\n         if l\n@@ -1863,20 +1863,16 @@\n  == %22%22:%0A\n-    \n         \n@@ -1885,36 +1885,32 @@\n ntinue%0A%0A        \n-    \n print(f%22$%7Bline%7D%22\n@@ -1923,14 +1923,13 @@\n     \n-    ui\n+parts\n  = l\n@@ -1952,20 +1952,19 @@\n     \n-    \n cmd = \n-ui\n+parts\n %5B0%5D%0A\n@@ -2030,20 +2030,20 @@\n cmd == %22\n-init\n+show\n %22:%0A     \n@@ -2053,28 +2053,18 @@\n     \n-moto.\n+pr\n in\n-i\n t(\n-int(ui%5B1%5D)\n+moto\n )%0A%0A \n@@ -2075,36 +2075,36 @@\n    elif cmd == %22\n-show\n+init\n %22:%0A            p\n@@ -2107,106 +2107,152 @@\n    p\n-rint(moto.toString())%0A%0A        elif cmd == %22enter%22:%0A           pessoa = Pessoa(ui%5B1%5D, int(ui\n+ot = int(parts%5B1%5D)%0A            moto = Motoca(pot)%0A%0A        elif cmd == %22enter%22:%0A            nome = parts %5B1%5D%0A            idade = int(parts\n %5B2%5D)\n-)\n %0A\n+ \n     \n@@ -2271,22 +2271,35 @@\n inserir(\n-p\n+P\n essoa\n+(nome, idade)\n )%0A%0A     \n@@ -2340,25 +2340,16 @@\n   pessoa\n-_removida\n  = moto.\n@@ -2379,25 +2379,16 @@\n f pessoa\n-_removida\n  is not \n@@ -2425,28 +2425,8 @@\n ssoa\n-_removida.toString()\n )%0A  \n@@ -2459,16 +2459,50 @@\n  %22buy%22:%0A\n+            tempo = int(parts%5B1%5D)%0A\n         \n@@ -2522,18 +2522,13 @@\n ime(\n-int(ui%5B1%5D)\n+tempo\n )%0A%0A \n@@ -2571,19 +2571,17 @@\n     \n-moto.drive(\n+tempo =  \n int(\n@@ -2589,16 +2589,45 @@\n arts%5B1%5D)\n+%0A            moto.drive(tempo\n )%0A%0A     \n@@ -2657,30 +2657,24 @@\n             \n-print(\n moto.honk())\n@@ -2672,17 +2672,16 @@\n o.honk()\n-)\n %0A%0A      \n@@ -2716,137 +2716,29 @@\n ail:\n- unknown\n  com\n-m\n and\n-%22)%0A%0A    except EOFError:%0A        break%0A    except Exception as e: %0A        print(f%22fail: processing error: %7Be%7D\n+o invalido\n %22)%0A\n+%0A\n     \n",
            "lines": "114"
        },
        {
            "label": "2025-10-28_13-01-17",
            "content": "@@ -1,5176 +1,1784 @@\n-# --- Classe Pessoa ---%0A# Crie a classe Pessoa com os atributos age e name.%0A# Defina os atributos como privados.%0A# Crie o construtor da classe que recebe name como uma string e age como um n%C3%BAmero.%0A# Crie os m%C3%A9todos getAge() e getName() para retornar a idade e o nome da pessoa, respectivamente.%0A# Crie o m%C3%A9todo toString() para retornar una string no formato %22nome:idade%22.%0Aclass Pessoa:%0A    %22%22%22%0A    Representa um usu%C3%A1rio da motoca, com nome e idade.%0A    %22%22%22%0A    def __init__(self, name: str, age: int):%0A        self.__name: str = name%0A        self.__age: int = age%0A%0A    def getName(self) -%3E str:%0A        %22%22%22Retorna o nome da pessoa.%22%22%22%0A        return self.__name%0A%0A    def getAge(self) -%3E int:%0A        %22%22%22Retorna a idade da pessoa.%22%22%22%0A        return self.__age%0A%0A    def toString(self) -%3E str:%0A        %22%22%22Retorna a representa%C3%A7%C3%A3o em string da pessoa (nome:idade).%22%22%22%0A        return f%22%7Bself.__name%7D:%7Bself.__age%7D%22%0A%0A    def __str__(self) -%3E str:%0A        %22%22%22M%C3%A9todo padr%C3%A3o do Python para convers%C3%A3o em string.%22%22%22%0A        return self.toString()%0A%0A# --- Classe Motoca ---%0Aclass Motoca:%0A    %22%22%22%0A    Representa a motoca motorizada do parque.%0A    %22%22%22%0A    %0A    # Crie a classe Motoca com os atributos potencia, time e pessoa.%0A    # Inicialize os atributos no construtor, onde potencia inicia com 1, %0A    # time inicia com 0 e pessoa inicia como nulo (None).%0A    def __init__(self):%0A        self.__potencia: int = 1%0A        self.__time: int = 0%0A        # Em Python, 'null' %C3%A9 'None'. %0A        # A anota%C3%A7%C3%A3o de tipo 'Pessoa %7C None' (Python 3.10+) %0A        # substitui o 'Optional%5BPessoa%5D' e n%C3%A3o precisa de import.%0A        self.__pessoa: Pessoa %7C None = None %0A%0A    # M%C3%A9todo de utilidade para o comando $init%0A    def init(self, potencia: int):%0A        %22%22%22%0A        Inicializa ou reinicia a motoca com uma nova pot%C3%AAncia.%0A        %22%22%22%0A        self.__potencia = potencia%0A        self.__time = 0%0A        self.__pessoa = None%0A%0A    # Parte 1: Inserir%0A    # Crie o m%C3%A9todo inserir(pessoa: Pessoa): bool que permite inserir uma pessoa na motoca.%0A    # Verifique se h%C3%A1 uma pessoa na motoca. Se houver, imprima %22fail: busy motorcycle%22 e retorne falso.%0A    # Caso contr%C3%A1rio, insira a pessoa na motoca e retorne verdadeiro.%0A    def inserir(self, pessoa: Pessoa) -%3E bool:%0A        %22%22%22%0A        Tenta embarcar uma pessoa na motoca.%0A        %22%22%22%0A        # Teste: if variavel is not None:%0A        if self.__pessoa is not None:%0A            print(%22fail: busy motorcycle%22)%0A            return False%0A        %0A        self.__pessoa = pessoa%0A        return True%0A%0A    # Parte 2: Remover%0A    # Crie o m%C3%A9todo remover(): Pessoa %7C None que permite remover a pessoa da motoca.%0A    # Verifique se h%C3%A1 uma pessoa na motoca. Se n%C3%A3o houver, imprima %22fail: empty motorcycle%22 e retorne nulo.%0A    # Caso contr%C3%A1rio, remova a pessoa da motoca e retorne a pessoa removida.%0A    def remover(self) -%3E Pessoa %7C None:%0A        %22%22%22%0A        Tenta desembarcar a pessoa da motoca.%0A        %22%22%22%0A        if self.__pessoa is None:%0A            print(%22fail: empty motorcycle%22)%0A            return None%0A        %0A        pessoa_removida = self.__pessoa%0A        self.__pessoa = None%0A        return pessoa_removida%0A%0A    # Parte 3: Comprar Tempo%0A    # Crie o m%C3%A9todo buyTime(time: number) que permite comprar tempo em minutos.%0A    # Incremente o tempo da motoca com o tempo passado como par%C3%A2metro.%0A    def buyTime(self, time: int):%0A        %22%22%22%0A        Adiciona minutos ao tempo de uso da motoca.%0A        %22%22%22%0A        self.__time += time%0A%0A    # Parte 4: Dirigir%0A    # Crie o m%C3%A9todo drive(time: number) que permite dirigir a motoca por um tempo.%0A    def drive(self, time: int):%0A        %22%22%22%0A        Tenta dirigir a motoca por um determinado n%C3%BAmero de minutos.%0A        %22%22%22%0A        # Verifique se h%C3%A1 tempo dispon%C3%ADvel na motoca.%0A        if self.__time == 0:%0A            print(%22fail: buy time first%22)%0A            return%0A%0A        # Verifique se h%C3%A1 uma pessoa na motoca.%0A        if self.__pessoa is None:%0A            print(%22fail: empty motorcycle%22)%0A            return%0A%0A        # Verifique se a idade da pessoa %C3%A9 maior que 10 anos.%0A        if self.__pessoa.getAge() %3E 10:%0A            print(%22fail: too old to drive%22)%0A            return%0A%0A        # Calcule o novo tempo. Se for menor ou igual a 0...%0A        if time %3E= self.__time:%0A            # Imprime o tempo que realmente foi consumido%0A            print(f%22fail: time finished after %7Bself.__time%7D minutes%22)%0A            self.__time = 0%0A        else:%0A            # Atualize o tempo da motoca.%0A            self.__time -= time%0A%0A    # Parte 5: Buzinar%0A    # Crie o m%C3%A9todo honk() que permite buzinar a motoca.%0A    # Construa a string da buzina, onde o n%C3%BAmero de %22e%22 %C3%A9 igual %C3%A0 pot%C3%AAncia.%0A    def honk(self) -%3E str:%0A        %22%22%22%0A        Retorna o som da buzina da motoca.%0A        %22%22%22%0A        # Em Python, %22e%22 * 5 resulta em %22eeeee%22%0A        return %22P%22 + (%22e%22 * self.__potencia) + %22m%22%0A%0A    # Crie o m%C3%A9todo toString() para mostrar o estado da motoca.%0A    # $show -%3E f%22power:%7Bthis.power%7D, time:%7Bthis.time%7D, person:%7Bthis.person%7D%22%0A    # Ex: power:1, time:0, person:(marcos:4)%0A    # Ex: power:1, time:0, person:(empty)%0A    def toString(self) -%3E str:%0A        %22%22%22%0A        Retorna a representa%C3%A7%C3%A3o em string do estado atual da motoca.%0A        %22%22%22\n+class Pessoa:%0A    def __init__(self, name: str, age: int):%0A        self.__name = name%0A        self.__age = age %0A    %0A    def getName(self) -%3E str:%0A        return self.__name%0A%0A    def getAge(self) -%3E int:%0A        return self.__age%0A%0A    def toString(self) -%3E str: %0A        return f%22%7Bself.__name%7D:%7Bself.__age%7D%22%0A%0A    def __str__(self) -%3E str:%0A        return self.toString()%0A%0Aclass Motoca:%0A    def __init__(self):%0A        self.__potencia: int = 1%0A        self.__time: int = 0%0A        self.__pessoa: Pessoa %7C None = None%0A%0A    def init(self, potencia: int):%0A        self.__potencia = potencia%0A        self.__time = 0%0A        self.__pessoa = None%0A%0A    def inserir(self, pessoa: Pessoa) -%3E bool:%0A            if self.pessoa is not None:%0A                print(%22fail: busy motorcycle%22) %0A                return False %0A            self.pessoa = pessoa %0A            return True %0A%0A    def remover(self) -%3E Pessoa %7C None:%0A        if self.pessoa is None:%0A            print(%22fail: empty motorcycle%22)%0A            return None%0A        pessoa_removida = self.pessoa%0A        self.__pessoa = None %0A        return pessoa_removida%0A%0A    def buyTime(self, time: int):%0A        self.__time += time%0A%0A    def drive (self, time: int):%0A        if self.__time == 0:%0A            print(%22fail: buy time first%22)%0A            return%0A        if self.__pessoa is None: %0A            print(%22fail: empty motorcycle%22)%0A            return%0A        if self.__pessoa.getAge() %3E 10:%0A            print(%22fail: too old to drive%22)%0A            return%0A%0A        if time %3E= self.__time:%0A            print(f%22fail: time finished after %7Bself.__time%7D minutes%22)%0A            self.__time = 0%0A        else: %0A            self.__time -= time%0A%0A    def honk(self) -%3E str:%0A        return %22P%22 + (%22e%22 * self.__potencia) + %22m%22%0A%0A    def toString(self) -%3E str:\n %0A   \n@@ -1900,29 +1900,16 @@\n ng()%7D)%22%0A\n-            %0A\n         \n@@ -2026,2099 +2026,1094 @@\n     \n-%22%22%22M%C3%A9todo padr%C3%A3o do Python para convers%C3%A3o em string.%22%22%22%0A        return self.toString()%0A%0A%0A# --- Loop principal para processar os comandos (Shell) ---%0Adef main():%0A    %22%22%22%0A    Fun%C3%A7%C3%A3o principal que instancia a Motoca e processa os comandos%0A    da entrada padr%C3%A3o (shell).%0A    %22%22%22%0A    moto = Motoca()%0A%0A    while True:%0A        try:%0A            # L%C3%AA a linha de comando%0A            line = input().strip()%0A            if line == %22%22:%0A                continue%0A%0A            # Ecoa o comando lido (exig%C3%AAncia do formato do problema)%0A            print(f%22$%7Bline%7D%22)%0A            %0A            # Divide a linha em palavras (comando e argumentos)%0A            ui = line.split()%0A            cmd = ui%5B0%5D%0A%0A            # Processamento dos comandos%0A            if cmd == 'end':%0A                break%0A            elif cmd == 'init':%0A                # $init %3Cpotencia%3E%0A                moto.init(int(ui%5B1%5D))%0A            elif cmd == 'show':%0A                # $show%0A                print(moto.toString())%0A            elif cmd == 'enter':%0A                # $enter %3Cnome%3E %3Cidade%3E%0A                pessoa = Pessoa(ui%5B1%5D, int(ui%5B2%5D))%0A                moto.inserir(pessoa)%0A            elif cmd == 'leave':%0A                # $leave%0A                pessoa_removida = moto.remover()%0A                if pessoa_removida is not None:%0A                    # Imprime a pessoa que saiu%0A                    print(pessoa_removida.toString())%0A            elif cmd == 'buy':%0A                # $buy %3Ctempo%3E%0A                moto.buyTime(int(ui%5B1%5D))%0A            elif cmd == 'drive':%0A                # $drive %3Ctempo%3E%0A                moto.drive(int(ui%5B1%5D))%0A            elif cmd == 'honk':%0A                # $honk%0A                print(moto.honk())%0A            else:%0A                print(%22fail: unknown command%22)%0A%0A        except EOFError:%0A            # Fim da entrada%0A            break%0A        except Exception as e:%0A            # Captura outros erros (ex: argumentos faltando, convers%C3%A3o de int)%0A            # Imprime o erro na sa%C3%ADda padr%C3%A3o, sem precisar do 'sys.stderr'%0A            print(f%22fail: processing error: %7Be%7D%22)%0A%0A# Ponto de entrada do script\n+return self.toString()%0A%0A%0Adef main():%0A    moto = Motoca()%0A    while True: %0A        try: %0A            line = input().strip()%0A            if line == %22%22:%0A                continue%0A%0A            print(f%22$%7Bline%7D%22)%0A            ui = line.split()%0A            cmd = ui%5B0%5D%0A%0A        if cmd == %22end%22:%0A            break %0A%0A        elif cmd == %22init%22:%0A            moto.init(int(ui%5B1%5D))%0A%0A        elif cmd == %22show%22:%0A            print(moto.toString())%0A%0A        elif cmd == %22enter%22:%0A           pessoa = Pessoa(ui%5B1%5D, int(ui%5B2%5D))%0A           moto.inserir(pessoa)%0A%0A        elif cmd == %22leave%22:%0A            pessoa_removida = moto.remover()%0A            if pessoa_removida is not None:%0A                print(pessoa_removida.toString())%0A        %0A        elif cmd == %22buy%22:%0A            moto.buyTime(int(ui%5B1%5D))%0A%0A        elif cmd == %22drive%22:%0A            moto.drive(int(parts%5B1%5D))%0A%0A        elif cmd == %22honk%22:%0A            print(moto.honk())%0A%0A        else:%0A            print(%22fail: unknown command%22)%0A%0A    except EOFError:%0A        break%0A    except Exception as e: %0A        print(f%22fail: processing error: %7Be%7D%22)%0A        \n %0Aif \n",
            "lines": "125"
        },
        {
            "label": "2025-10-28_13-02-36",
            "content": "@@ -1,1784 +1,5176 @@\n-class Pessoa:%0A    def __init__(self, name: str, age: int):%0A        self.__name = name%0A        self.__age = age %0A    %0A    def getName(self) -%3E str:%0A        return self.__name%0A%0A    def getAge(self) -%3E int:%0A        return self.__age%0A%0A    def toString(self) -%3E str: %0A        return f%22%7Bself.__name%7D:%7Bself.__age%7D%22%0A%0A    def __str__(self) -%3E str:%0A        return self.toString()%0A%0Aclass Motoca:%0A    def __init__(self):%0A        self.__potencia: int = 1%0A        self.__time: int = 0%0A        self.__pessoa: Pessoa %7C None = None%0A%0A    def init(self, potencia: int):%0A        self.__potencia = potencia%0A        self.__time = 0%0A        self.__pessoa = None%0A%0A    def inserir(self, pessoa: Pessoa) -%3E bool:%0A            if self.pessoa is not None:%0A                print(%22fail: busy motorcycle%22) %0A                return False %0A            self.pessoa = pessoa %0A            return True %0A%0A    def remover(self) -%3E Pessoa %7C None:%0A        if self.pessoa is None:%0A            print(%22fail: empty motorcycle%22)%0A            return None%0A        pessoa_removida = self.pessoa%0A        self.__pessoa = None %0A        return pessoa_removida%0A%0A    def buyTime(self, time: int):%0A        self.__time += time%0A%0A    def drive (self, time: int):%0A        if self.__time == 0:%0A            print(%22fail: buy time first%22)%0A            return%0A        if self.__pessoa is None: %0A            print(%22fail: empty motorcycle%22)%0A            return%0A        if self.__pessoa.getAge() %3E 10:%0A            print(%22fail: too old to drive%22)%0A            return%0A%0A        if time %3E= self.__time:%0A            print(f%22fail: time finished after %7Bself.__time%7D minutes%22)%0A            self.__time = 0%0A        else: %0A            self.__time -= time%0A%0A    def honk(self) -%3E str:%0A        return %22P%22 + (%22e%22 * self.__potencia) + %22m%22%0A%0A    def toString(self) -%3E str:\n+# --- Classe Pessoa ---%0A# Crie a classe Pessoa com os atributos age e name.%0A# Defina os atributos como privados.%0A# Crie o construtor da classe que recebe name como uma string e age como um n%C3%BAmero.%0A# Crie os m%C3%A9todos getAge() e getName() para retornar a idade e o nome da pessoa, respectivamente.%0A# Crie o m%C3%A9todo toString() para retornar una string no formato %22nome:idade%22.%0Aclass Pessoa:%0A    %22%22%22%0A    Representa um usu%C3%A1rio da motoca, com nome e idade.%0A    %22%22%22%0A    def __init__(self, name: str, age: int):%0A        self.__name: str = name%0A        self.__age: int = age%0A%0A    def getName(self) -%3E str:%0A        %22%22%22Retorna o nome da pessoa.%22%22%22%0A        return self.__name%0A%0A    def getAge(self) -%3E int:%0A        %22%22%22Retorna a idade da pessoa.%22%22%22%0A        return self.__age%0A%0A    def toString(self) -%3E str:%0A        %22%22%22Retorna a representa%C3%A7%C3%A3o em string da pessoa (nome:idade).%22%22%22%0A        return f%22%7Bself.__name%7D:%7Bself.__age%7D%22%0A%0A    def __str__(self) -%3E str:%0A        %22%22%22M%C3%A9todo padr%C3%A3o do Python para convers%C3%A3o em string.%22%22%22%0A        return self.toString()%0A%0A# --- Classe Motoca ---%0Aclass Motoca:%0A    %22%22%22%0A    Representa a motoca motorizada do parque.%0A    %22%22%22%0A    %0A    # Crie a classe Motoca com os atributos potencia, time e pessoa.%0A    # Inicialize os atributos no construtor, onde potencia inicia com 1, %0A    # time inicia com 0 e pessoa inicia como nulo (None).%0A    def __init__(self):%0A        self.__potencia: int = 1%0A        self.__time: int = 0%0A        # Em Python, 'null' %C3%A9 'None'. %0A        # A anota%C3%A7%C3%A3o de tipo 'Pessoa %7C None' (Python 3.10+) %0A        # substitui o 'Optional%5BPessoa%5D' e n%C3%A3o precisa de import.%0A        self.__pessoa: Pessoa %7C None = None %0A%0A    # M%C3%A9todo de utilidade para o comando $init%0A    def init(self, potencia: int):%0A        %22%22%22%0A        Inicializa ou reinicia a motoca com uma nova pot%C3%AAncia.%0A        %22%22%22%0A        self.__potencia = potencia%0A        self.__time = 0%0A        self.__pessoa = None%0A%0A    # Parte 1: Inserir%0A    # Crie o m%C3%A9todo inserir(pessoa: Pessoa): bool que permite inserir uma pessoa na motoca.%0A    # Verifique se h%C3%A1 uma pessoa na motoca. Se houver, imprima %22fail: busy motorcycle%22 e retorne falso.%0A    # Caso contr%C3%A1rio, insira a pessoa na motoca e retorne verdadeiro.%0A    def inserir(self, pessoa: Pessoa) -%3E bool:%0A        %22%22%22%0A        Tenta embarcar uma pessoa na motoca.%0A        %22%22%22%0A        # Teste: if variavel is not None:%0A        if self.__pessoa is not None:%0A            print(%22fail: busy motorcycle%22)%0A            return False%0A        %0A        self.__pessoa = pessoa%0A        return True%0A%0A    # Parte 2: Remover%0A    # Crie o m%C3%A9todo remover(): Pessoa %7C None que permite remover a pessoa da motoca.%0A    # Verifique se h%C3%A1 uma pessoa na motoca. Se n%C3%A3o houver, imprima %22fail: empty motorcycle%22 e retorne nulo.%0A    # Caso contr%C3%A1rio, remova a pessoa da motoca e retorne a pessoa removida.%0A    def remover(self) -%3E Pessoa %7C None:%0A        %22%22%22%0A        Tenta desembarcar a pessoa da motoca.%0A        %22%22%22%0A        if self.__pessoa is None:%0A            print(%22fail: empty motorcycle%22)%0A            return None%0A        %0A        pessoa_removida = self.__pessoa%0A        self.__pessoa = None%0A        return pessoa_removida%0A%0A    # Parte 3: Comprar Tempo%0A    # Crie o m%C3%A9todo buyTime(time: number) que permite comprar tempo em minutos.%0A    # Incremente o tempo da motoca com o tempo passado como par%C3%A2metro.%0A    def buyTime(self, time: int):%0A        %22%22%22%0A        Adiciona minutos ao tempo de uso da motoca.%0A        %22%22%22%0A        self.__time += time%0A%0A    # Parte 4: Dirigir%0A    # Crie o m%C3%A9todo drive(time: number) que permite dirigir a motoca por um tempo.%0A    def drive(self, time: int):%0A        %22%22%22%0A        Tenta dirigir a motoca por um determinado n%C3%BAmero de minutos.%0A        %22%22%22%0A        # Verifique se h%C3%A1 tempo dispon%C3%ADvel na motoca.%0A        if self.__time == 0:%0A            print(%22fail: buy time first%22)%0A            return%0A%0A        # Verifique se h%C3%A1 uma pessoa na motoca.%0A        if self.__pessoa is None:%0A            print(%22fail: empty motorcycle%22)%0A            return%0A%0A        # Verifique se a idade da pessoa %C3%A9 maior que 10 anos.%0A        if self.__pessoa.getAge() %3E 10:%0A            print(%22fail: too old to drive%22)%0A            return%0A%0A        # Calcule o novo tempo. Se for menor ou igual a 0...%0A        if time %3E= self.__time:%0A            # Imprime o tempo que realmente foi consumido%0A            print(f%22fail: time finished after %7Bself.__time%7D minutes%22)%0A            self.__time = 0%0A        else:%0A            # Atualize o tempo da motoca.%0A            self.__time -= time%0A%0A    # Parte 5: Buzinar%0A    # Crie o m%C3%A9todo honk() que permite buzinar a motoca.%0A    # Construa a string da buzina, onde o n%C3%BAmero de %22e%22 %C3%A9 igual %C3%A0 pot%C3%AAncia.%0A    def honk(self) -%3E str:%0A        %22%22%22%0A        Retorna o som da buzina da motoca.%0A        %22%22%22%0A        # Em Python, %22e%22 * 5 resulta em %22eeeee%22%0A        return %22P%22 + (%22e%22 * self.__potencia) + %22m%22%0A%0A    # Crie o m%C3%A9todo toString() para mostrar o estado da motoca.%0A    # $show -%3E f%22power:%7Bthis.power%7D, time:%7Bthis.time%7D, person:%7Bthis.person%7D%22%0A    # Ex: power:1, time:0, person:(marcos:4)%0A    # Ex: power:1, time:0, person:(empty)%0A    def toString(self) -%3E str:%0A        %22%22%22%0A        Retorna a representa%C3%A7%C3%A3o em string do estado atual da motoca.%0A        %22%22%22\n %0A   \n@@ -5292,16 +5292,29 @@\n ng()%7D)%22%0A\n+            %0A\n         \n@@ -5431,1057 +5431,2099 @@\n     \n-return self.toString()%0A%0A%0Adef main():%0A    moto = Motoca()%0A    while True: %0A        try: %0A            line = input().strip()%0A            if line == %22%22:%0A                continue%0A%0A            print(f%22$%7Bline%7D%22)%0A            ui = line.split()%0A            cmd = ui%5B0%5D%0A%0A        if cmd == %22end%22:%0A            break %0A%0A        elif cmd == %22init%22:%0A            moto.init(int(ui%5B1%5D))%0A%0A        elif cmd == %22show%22:%0A            print(moto.toString())%0A%0A        elif cmd == %22enter%22:%0A           pessoa = Pessoa(ui%5B1%5D, int(ui%5B2%5D))%0A           moto.inserir(pessoa)%0A%0A        elif cmd == %22leave%22:%0A            pessoa_removida = moto.remover()%0A            if pessoa_removida is not None:%0A                print(pessoa_removida.toString())%0A        %0A        elif cmd == %22buy%22:%0A            moto.buyTime(int(ui%5B1%5D))%0A%0A        elif cmd == %22drive%22:%0A            moto.drive(int(parts%5B1%5D))%0A%0A        elif cmd == %22honk%22:%0A            print(moto.honk())%0A%0A        else:%0A            print(%22fail: unknown command%22)%0A%0A    except EOFError:%0A        break%0A    except Exception as e: %0A        %0A        \n+%22%22%22M%C3%A9todo padr%C3%A3o do Python para convers%C3%A3o em string.%22%22%22%0A        return self.toString()%0A%0A%0A# --- Loop principal para processar os comandos (Shell) ---%0Adef main():%0A    %22%22%22%0A    Fun%C3%A7%C3%A3o principal que instancia a Motoca e processa os comandos%0A    da entrada padr%C3%A3o (shell).%0A    %22%22%22%0A    moto = Motoca()%0A%0A    while True:%0A        try:%0A            # L%C3%AA a linha de comando%0A            line = input().strip()%0A            if line == %22%22:%0A                continue%0A%0A            # Ecoa o comando lido (exig%C3%AAncia do formato do problema)%0A            print(f%22$%7Bline%7D%22)%0A            %0A            # Divide a linha em palavras (comando e argumentos)%0A            ui = line.split()%0A            cmd = ui%5B0%5D%0A%0A            # Processamento dos comandos%0A            if cmd == 'end':%0A                break%0A            elif cmd == 'init':%0A                # $init %3Cpotencia%3E%0A                moto.init(int(ui%5B1%5D))%0A            elif cmd == 'show':%0A                # $show%0A                print(moto.toString())%0A            elif cmd == 'enter':%0A                # $enter %3Cnome%3E %3Cidade%3E%0A                pessoa = Pessoa(ui%5B1%5D, int(ui%5B2%5D))%0A                moto.inserir(pessoa)%0A            elif cmd == 'leave':%0A                # $leave%0A                pessoa_removida = moto.remover()%0A                if pessoa_removida is not None:%0A                    # Imprime a pessoa que saiu%0A                    print(pessoa_removida.toString())%0A            elif cmd == 'buy':%0A                # $buy %3Ctempo%3E%0A                moto.buyTime(int(ui%5B1%5D))%0A            elif cmd == 'drive':%0A                # $drive %3Ctempo%3E%0A                moto.drive(int(ui%5B1%5D))%0A            elif cmd == 'honk':%0A                # $honk%0A                print(moto.honk())%0A            else:%0A                print(%22fail: unknown command%22)%0A%0A        except EOFError:%0A            # Fim da entrada%0A            break%0A        except Exception as e:%0A            # Captura outros erros (ex: argumentos faltando, convers%C3%A3o de int)%0A            # Imprime o erro na sa%C3%ADda padr%C3%A3o, sem precisar do 'sys.stderr'%0A            print(f%22fail: processing error: %7Be%7D%22)%0A%0A# Ponto de entrada do script\n %0Aif \n",
            "lines": "220"
        },
        {
            "label": "2025-10-28_13-02-42",
            "content": "@@ -71,21 +71,16 @@\n f.__name\n-: str\n  = name%0A\n@@ -97,21 +97,16 @@\n lf.__age\n-: int\n  = age %0A\n",
            "lines": "125"
        },
        {
            "label": "2025-10-28_13-03-14",
            "content": "@@ -2301,20 +2301,16 @@\n         \n-    \n if cmd =\n@@ -2334,20 +2334,16 @@\n     \n-    \n break %0A%0A\n     \n@@ -2338,20 +2338,16 @@\n break %0A%0A\n-    \n         \n@@ -2374,28 +2374,24 @@\n             \n-    \n moto.init(in\n@@ -2401,36 +2401,32 @@\n i%5B1%5D))%0A%0A        \n-  \n-  \n elif cmd == %22sho\n@@ -2429,20 +2429,16 @@\n %22show%22:%0A\n-    \n         \n@@ -2465,36 +2465,32 @@\n ing())%0A%0A        \n-    \n elif cmd == %22ent\n@@ -2494,17 +2494,16 @@\n enter%22:%0A\n- \n         \n@@ -2540,17 +2540,16 @@\n ui%5B2%5D))%0A\n- \n         \n@@ -2573,36 +2573,32 @@\n essoa)%0A%0A        \n-    \n elif cmd == %22lea\n@@ -2610,28 +2610,24 @@\n             \n-  \n-  \n pessoa_remov\n@@ -2647,20 +2647,16 @@\n mover()%0A\n-    \n         \n@@ -2703,28 +2703,24 @@\n             \n-    \n print(pessoa\n@@ -2745,33 +2745,25 @@\n ())%0A        \n- \n-   %0A    \n+%0A\n         elif\n@@ -2785,28 +2785,24 @@\n             \n-    \n moto.buyTime\n@@ -2815,36 +2815,32 @@\n i%5B1%5D))%0A%0A        \n- \n-   \n elif cmd == %22dri\n@@ -2852,28 +2852,24 @@\n             \n-   \n- \n moto.drive(i\n@@ -2887,28 +2887,24 @@\n ))%0A%0A        \n-    \n elif cmd == \n@@ -2915,36 +2915,32 @@\n k%22:%0A            \n- \n-   \n print(moto.honk(\n@@ -2955,22 +2955,14 @@\n     \n-   \n- \n else:%0A\n-    \n     \n@@ -3001,28 +3001,24 @@\n mand%22)%0A%0A    \n- \n-   \n except EOFEr\n@@ -3034,22 +3034,14 @@\n     \n-    \n break%0A\n-    \n     \n",
            "lines": "125"
        },
        {
            "label": "2025-10-28_13-06-27",
            "content": "@@ -2530,28 +2530,24 @@\n             \n-    \n pessoa = Pes\n@@ -2573,29 +2573,8 @@\n %5D))%0A\n-                %0A    \n     \n",
            "lines": "125"
        },
        {
            "label": "2025-10-28_13-08-07",
            "content": "@@ -2573,16 +2573,33 @@\n ui%5B2%5D))%0A\n+                %0A\n         \n@@ -3195,49 +3195,8 @@\n     \n-    print(f%22fail: processing error: %7Be%7D%22)\n %0A   \n",
            "lines": "126"
        },
        {
            "label": "2025-10-28_13-09-15",
            "content": "@@ -2941,26 +2941,29 @@\n o.drive(int(\n-ui\n+parts\n %5B1%5D))%0A%0A     \n",
            "lines": "125"
        },
        {
            "label": "2025-10-28_13-11-21",
            "content": "@@ -916,34 +916,32 @@\n         if self.\n-__\n pessoa is None:%0A\n",
            "lines": "125"
        },
        {
            "label": "2025-10-28_13-12-26",
            "content": "@@ -702,34 +702,32 @@\n         if self.\n-__\n pessoa is not No\n@@ -817,34 +817,32 @@\n            self.\n-__\n pessoa = pessoa \n@@ -1037,26 +1037,24 @@\n vida = self.\n-__\n pessoa%0A     \n",
            "lines": "125"
        },
        {
            "label": "2025-10-28_13-12-51",
            "content": "class Pessoa:\n    def __init__(self, name: str, age: int):\n        self.__name: str = name\n        self.__age: int = age \n    \n    def getName(self) -> str:\n        return self.__name\n\n    def getAge(self) -> int:\n        return self.__age\n\n    def toString(self) -> str: \n        return f\"{self.__name}:{self.__age}\"\n\n    def __str__(self) -> str:\n        return self.toString()\n\nclass Motoca:\n    def __init__(self):\n        self.__potencia: int = 1\n        self.__time: int = 0\n        self.__pessoa: Pessoa | None = None\n\n    def init(self, potencia: int):\n        self.__potencia = potencia\n        self.__time = 0\n        self.__pessoa = None\n\n    def inserir(self, pessoa: Pessoa) -> bool:\n            if self.__pessoa is not None:\n                print(\"fail: busy motorcycle\") \n                return False \n            self.__pessoa = pessoa \n            return True \n\n    def remover(self) -> Pessoa | None:\n        if self.__pessoa is None:\n            print(\"fail: empty motorcycle\")\n            return None\n        pessoa_removida = self.__pessoa\n        self.__pessoa = None \n        return pessoa_removida\n\n    def buyTime(self, time: int):\n        self.__time += time\n\n    def drive (self, time: int):\n        if self.__time == 0:\n            print(\"fail: buy time first\")\n            return\n        if self.__pessoa is None: \n            print(\"fail: empty motorcycle\")\n            return\n        if self.__pessoa.getAge() > 10:\n            print(\"fail: too old to drive\")\n            return\n\n        if time >= self.__time:\n            print(f\"fail: time finished after {self.__time} minutes\")\n            self.__time = 0\n        else: \n            self.__time -= time\n\n    def honk(self) -> str:\n        return \"P\" + (\"e\" * self.__potencia) + \"m\"\n\n    def toString(self) -> str:\n        person_str = \"(empty)\"\n        if self.__pessoa is not None:\n            person_str = f\"({self.__pessoa.toString()})\"\n        return f\"power:{self.__potencia}, time:{self.__time}, person:{person_str}\"\n\n    def __str__(self) -> str:\n        return self.toString()\n\n\ndef main():\n    moto = Motoca()\n    while True: \n        try: \n            line = input().strip()\n            if line == \"\":\n                continue\n\n            print(f\"${line}\")\n            ui = line.split()\n            cmd = ui[0]\n\n            if cmd == \"end\":\n                break \n\n            elif cmd == \"init\":\n                moto.init(int(ui[1]))\n\n            elif cmd == \"show\":\n                print(moto.toString())\n\n            elif cmd == \"enter\":\n                pessoa = Pessoa(ui[1], int(ui[2]))\n                moto.inserir(pessoa)\n\n            elif cmd == \"leave\":\n                pessoa_removida = moto.remover()\n                if pessoa_removida is not None:\n                    print(pessoa_removida.toString())\n            \n            elif cmd == \"buy\":\n                moto.buyTime(int(ui[1]))\n\n            elif cmd == \"drive\":\n                moto.drive(int(ui[1]))\n\n            elif cmd == \"honk\":\n                print(moto.honk())\n\n            else:\n                print(\"fail: unknown command\")\n\n        except EOFError:\n            break\n        except Exception as e: \n            print(f\"fail: processing error: {e}\")\n        \nif __name__ == \"__main__\":\n    main()",
            "lines": "125"
        }
    ]
}