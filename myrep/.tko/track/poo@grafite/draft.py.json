{
    "patches": [
        {
            "label": "2025-10-28_12-25-21",
            "content": "@@ -1,44 +1,4 @@\n-import sys%0Afrom typing import Optional%0A%0A\n clas\n",
            "lines": "132"
        },
        {
            "label": "2025-10-28_12-26-00",
            "content": "@@ -1403,17 +1403,17 @@\n alibre i\n-n\n+m\n compativ\n",
            "lines": "135"
        },
        {
            "label": "2025-10-28_12-26-24",
            "content": "import sys\nfrom typing import Optional\n\nclass Lead: \n    def __init__(self, thickness: float, hardness: str, size: int):\n        self.__thickness: float = thickness\n        self.__hardness: str = hardness\n        self.__size: int = size\n\n    def getThickness(self) -> float:\n        return self.__thickness\n\n    def getSize(self) -> int:\n        return self.__size\n    \n    def setSize(self, new_size: int):\n        self.__size = new_size\n\n    def getHardness(self) -> str:\n        return self.__hardness\n\n    def usagePerSheet(self) -> int:\n        if self.__hardness == \"HB\":\n            return 1\n        elif self.__hardness == \"2B\":\n            return 2\n        elif self.__hardness == \"4B\":\n            return 4\n        elif self.__hardness == \"6B\":\n            return 6\n        return 0\n\n    def toString(self) -> str:\n        return f\"[{self.__thickness}:{self.__hardness}:{self.__size}]\"\n\n    def __str__(self) -> str:\n        return self.toString()\n\nclass Pencil:\n    def __init__(self):\n        self.__thickness: float = 0.0\n        self.__tip: Optional[Lead] = None \n\n    def init(self, thickness: float) -> bool:\n        self.__thickness = thickness\n        self.__tip = None\n        return True\n\n    def hasGrafite(self) -> bool:\n        return self.__tip is not None\n\n    def insert(self, lead: Lead) -> bool:\n        if lead.getThickness() != self.__thickness:\n            print(\"fail: calibre incompativel\")\n            return False\n\n        if self.hasGrafite():\n            print(\"fail: ja existe grafite\")\n            return False\n\n        self.__tip = lead\n        return True\n\n    def remove(self) -> Optional[Lead]:\n        if not self.hasGrafite():\n            print(\"fail: nao existe grafite\")\n            return None\n\n        remove_lead = self.__tip\n        self.__tip = None\n        return remove_lead\n\n    def writePage(self):\n        if not self.hasGrafite():\n            print(\"fail: nao existe grafite\")\n            return\n\n        if self.__tip.getSize() <= 10:\n            print(\"fail: tamanho insuficiente\")\n            return\n\n        usage = self.__tip.usagePerSheet()\n        final_size = self.__tip.getSize() - usage\n\n        if final_size < 10:\n            self.__tip.setSize(10)\n            print(\"fail: folha incompleta\")\n        else:\n            self.__tip.setSize(final_size)\n\n    def toString(self) -> str:\n        tip_str = \"null\"\n        if self.hasGrafite():\n            tip_str = self.__tip.toString()\n        return f\"calibre: {self.__thickness}, grafite: {tip_str}\"\n\n    def __str__(self) -> str: \n        return self.toString()\n\ndef main():\n    pencil = Pencil()\n    while True:\n        try: \n            line = input().strip()\n            if line == \"\":\n                continue \n            print(f\"${line}\")\n\n            ui = line.split()\n            cmd = ui[0]\n\n            if cmd == \"end\":\n                break \n            elif cmd == \"init\":\n                pencil.init(float(ui[1]))\n            elif cmd == \"insert\":\n                lead = Lead(float(ui[1]), ui[2], int(ui[3]))\n                pencil.insert(lead)\n            elif cmd == \"remove\":\n                pencil.remove()\n            elif cmd == \"write\":\n                pencil.writePage()\n            elif cmd == \"show\":\n                print(pencil.toString())\n            else:\n                print(f\"fail: unknown command {cmd}\")\n\n        except EOFError: \n            break\n        except Exception as e: \n            print(f\"fail: processing error: {e}\", file = sys.stderr)\n\nif __name__ == \"__main__\":\n    main()\n            ",
            "lines": "135"
        }
    ]
}